<form onSubmit={handleSubmit} id="formId">
    <div className="input-block">
    <div
        style={{
        display: "flex",
        flexDirection: "column",
        justifyContent: "space-between",
        }}
    >
        <div
        style={{
            display: "flex",
            justifyContent: "space-between",
        }}
        >
        <div>
            <label htmlFor="email" className="input-label">
            Patient Name:&nbsp;
            </label>
            <input
            type="name"
            autoComplete="off"
            name="Patient Name"
            id="email"
            placeholder="Patient Name"
            defaultValue={testData.PatientName}
            onChange={handleChange}
            onBlur={handleBlur}
            style={{textTransform: "uppercase", width: "20vw"}}
            />
        </div>
        <div>
            <label htmlFor="name" className="input-label">
            Patient
            ID:&nbsp;
            </label>
            <input
            type="text"
            pattern="^\d*\.?\d{0,2}$"
            autoComplete="off"
            name="Patient ID"
            id="name"
            placeholder="Patient ID"
            defaultValue={testData.PatientID? testData.PatientID: vno.toString()}
            onChange={(e) => setVno(e.target.value.toString())}
            onBlur={handleBlur}
            readOnly
            />
        </div>
        <div>
            <label htmlFor="name" className="input-label">
            Registration On:&nbsp;
            </label>
            <input
            type="date"
            autoComplete="off"
            name="Registration On"
            id="name"
            placeholder="currentDate.toISOString().split('T')[0]"
            defaultValue={
                testData.RegistrationOn
                ? new Date(testData.RegistrationOn)
                    .toISOString()
                    .split("T")[0]
                : getCurrentDateIST()
            }
            onChange={handleChange}
            onBlur={handleBlur}
            readOnly
            />
        </div>
        </div>
        <div
        style={{
            display: "flex",
            justifyContent: "space-between",
        }}
        >
        <div>
            <label htmlFor="email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Age:&nbsp;
            </label>
            <input
            type="text"
            // pattern="^\d*\.?\d{0,2}$"
            autoComplete="off"
            name="Age"
            id="email"
            placeholder="Age"
            defaultValue={testData.Age}
            onChange={handleChange}
            onBlur={handleBlur}
            />
        </div>
        <div>
            <label htmlFor="email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Contact Details:&nbsp;
            </label>
            <input
            pattern="^\d*\.?\d{0,2}$"
            autoComplete="off"
            name="Contact Details"
            id="email"
            placeholder="Contact Details"
            defaultValue={testData.ContactDetails}
            onChange={handleChange}
            onBlur={handleBlur}
            />
        </div>
        <div>
            <label htmlFor="name" className="input-label">
            Collection On:&nbsp;
            </label>
            <input
            type="date"
            autoComplete="off"
            name="Collection On"
            id="name"
            placeholder="currentDate.toISOString().split('T')[0]"
            defaultValue={
                testData.Date
                ? new Date(testData.CollectionOn)
                    .toISOString()
                    .split("T")[0]
                : getCurrentDateIST()
            }
            onChange={handleChange}
            onBlur={handleBlur}
            />
        </div>
        </div>
        <div
        style={{
            display: "flex",
            justifyContent: "space-between",
        }}
        >
        <div>
            <label htmlFor="email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sex:&nbsp;
            </label>
            <select
            id="options"
            name="Sex"
            defaultValue={testData.Sex}
            style={{
                fontSize: "15px",
                padding: "2px",
                borderRadius: "1px",
                border: "1px solid #ddd",
            }}
            >
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Neutral">Neutral</option>
            </select>
        </div>
        <div>
            <label htmlFor="name" className="input-label" >
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ref
            By Dr:&nbsp;
            </label>
            <input
            type="name"
            autoComplete="off"
            name="Ref By Dr"
            id="name"
            placeholder="Doctor's Name"
            defaultValue={testData.RefByDr}
            onChange={handleChange}
            onBlur={handleBlur}
            style={{textTransform: "uppercase"}}
            />
        </div>
        <div>
            <label htmlFor="name" className="input-label">
            Reporting On:&nbsp;
            </label>
            <input
            type="date"
            autoComplete="off"
            name="Reporting On"
            id="name"
            placeholder="currentDate.toISOString().split('T')[0]"
            defaultValue={
                testData.Date
                ? new Date(testData.ReportingOn)
                    .toISOString()
                    .split("T")[0]
                : getCurrentDateIST()
            }
            onChange={handleChange}
            onBlur={handleBlur}
            />
        </div>
        </div>
        <div
        style={{
            display: "flex",
            justifyContent: "space-between",
        }}
        >
        <div>
            <label htmlFor="email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Center ID:&nbsp;
            </label>
            <input
            type="name"
            autoComplete="off"
            name="Center ID"
            id="email"
            placeholder="Center ID"
            defaultValue={testData.CenterID}
            onChange={handleChange}
            onBlur={handleBlur}
            />
        </div>
        <div>
            <label htmlFor="email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Center
            Name:&nbsp;
            </label>
            <input
            type="name"
            autoComplete="off"
            name="Center Name"
            id="email"
            placeholder="Center Name"
            defaultValue={testData.CenterName}
            onChange={handleChange}
            onBlur={handleBlur}
            style={{textTransform: "uppercase"}}
            />
        </div>
        </div>
    </div>
    </div>
    <div className="testName" style={{ overflowY: "auto" }} >
    <div style={{ display: "flex" }}>
        <div
        style={{
            width: "20%",
            display: "flex",
            flexDirection: "column",
            border: "1px solid #ddd",
        }}
        >
        <label htmlFor="email" className="input-label">
            Sr no.&nbsp;
        </label>
        {headers}
        </div>
        <div
        style={{
            width: "60%",
            display: "flex",
            flexDirection: "column",
            border: "1px solid #ddd",
        }}
        >
        <label htmlFor="email" className="input-label">
            INVESTIGATION NAME&nbsp;
        </label>
        {test}
        </div>
        <div
        style={{
            width: "20%",
            display: "flex",
            flexDirection: "column",
            border: "1px solid #ddd",
        }}
        >
        <label htmlFor="email" className="input-label">
            RATE&nbsp;
        </label>
        {rate}
        </div>
    </div>
    </div>
    <div className="input-block">
    <div
        style={{
        display: "flex",
        justifyContent: "space-between",
        }}
    >
        <div>
        <label htmlFor="Email" className="input-label">
            Email Address:&nbsp;
        </label>
        <input
            type="Email"
            autoComplete="off"
            name="Email Address"
            id="Email"
            placeholder="Email"
            defaultValue={testData.EmailAddress}
            onChange={handleChange}
            onBlur={handleBlur}
        />
        </div>
        <button
        className="input-button"
        type="button"
        onClick={handleClick}
        style={{
            padding: "5px",
            height: "35px",
        }}
        >
        Add test
        </button>
        <button
        className="input-button"
        type="button"
        onClick={handleClick2}
        style={{
            padding: "5px",
            height: "35px",
        }}
        >
        Remove test
        </button>
        <div style={{ display: "flex", flexDirection: "column" }}>
        <label htmlFor="Email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;Grand Amount:&nbsp;
            <input
            type="text"
            pattern="^\d*\.?\d{0,2}$"
            name="Grand Amount"
            value={grandAmount}
            defaultValue={testData.GrandAmount || 0}
            onChange={handleChange}
            readOnly
            />
        </label>
        <label htmlFor="Email" className="input-label">
            Advance Amount:&nbsp;
            <input
            type="text"
            pattern="^\d*\.?\d{0,2}$"
            name="Advance Amount"
            // value={advanceAmount}
            // placeholder="0"
            defaultValue={testData.AdvanceAmount || 0}
            onChange={handleChange}
            />
        </label>
        <label htmlFor="Email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Discount:&nbsp;
            <input
            type="text"
            pattern="^\d*\.?\d{0,2}$"
            name="Discount"
            // value={discount}
            // placeholder="0"
            defaultValue={testData.Discount || 0}
            onChange={handleChange}
            />
        </label>
        <label htmlFor="Email" className="input-label">
            &nbsp;Balance Amount:&nbsp;
            <input
            type="text"
            pattern="^\d*\.?\d{0,2}$"
            name="Balance Amount"
            value={balanceAmount}
            defaultValue={testData.BalanceAmount || 0}
            onChange={handleChange}
            readOnly
            />
        </label>
        </div>
    </div>
    </div>
    <div className="modal-buttons">
        <button
        className="input-button"
        type="button"
        onClick={handleNew}
        style={{ marginRight: "2px" }}
        >
        NEW REPORT
        </button>
    <div style={{ padding: "2px" }}>
        
        <button
        className="input-button"
        type="submit"
        style={{ marginRight: "2px" }}
        onClick={() => setSaveAndPrint(false)}
        >
        SAVE
        </button>
        <button
        className="input-button"
        type="submit"
        onClick={() => setSaveAndPrint(true)}
        >
        SAVE & PRINT
        </button>
    </div>
    </div>
</form>




//TEST REPORT//


<form onSubmit={handleSubmit} id="formId">
    <div className="input-block">
    <div
        style={{
        display: "flex",
        flexDirection: "column",
        justifyContent: "space-between",
        }}
    >
        <div
        style={{
            display: "flex",
            justifyContent: "space-between",
        }}
        >
        <div>
            <label htmlFor="email" className="input-label">
            Patient Name:&nbsp;
            </label>
            <input
            type="name"
            autoComplete="off"
            name="Patient Name"
            id="email"
            placeholder="Email"
            defaultValue={testData.PatientName}
            onChange={handleChange}
            onBlur={handleBlur}
            style={{textTransform: "uppercase"}}
            />
        </div>
        <div>
            <label htmlFor="name" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Patient
            ID:&nbsp;
            </label>
            <input
            type="text"
            pattern="^\d*\.?\d{0,2}$"
            autoComplete="off"
            name="Patient ID"
            id="name"
            placeholder="Name"
            defaultValue={testData.PatientID}
            onChange={(e) => setAdi(e.target.value)}
            onBlur={handleBlur}
            />
        </div>
        <div>
            <label htmlFor="name" className="input-label">
            Registration On:&nbsp;
            </label>
            <input
            type="date"
            autoComplete="off"
            name="Registration On"
            id="name"
            placeholder="currentDate.toISOString().split('T')[0]"
            defaultValue={
                testData.RegistrationOn
                ? new Date(testData.RegistrationOn)
                    .toISOString()
                    .split("T")[0]
                : getCurrentDateIST()
            }
            onChange={handleChange}
            onBlur={handleBlur}
            readOnly
            />
        </div>
        </div>
        <div
        style={{
            display: "flex",
            justifyContent: "space-between",
        }}
        >
        <div>
            <label htmlFor="email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Age:&nbsp;
            </label>
            <input
            type="text"
            // pattern="^\d*\.?\d{0,2}$"
            autoComplete="off"
            name="Age"
            id="email"
            placeholder="Email"
            defaultValue={testData.Age}
            onChange={handleChange}
            onBlur={handleBlur}
            />
        </div>
        <div>
            <label htmlFor="email" className="input-label">
            Contact Details:&nbsp;
            </label>
            <input
            pattern="^\d*\.?\d{0,2}$"
            autoComplete="off"
            name="Contact Details"
            id="email"
            placeholder="Email"
            defaultValue={testData.ContactDetails}
            onChange={handleChange}
            onBlur={handleBlur}
            />
        </div>
        <div>
            <label htmlFor="name" className="input-label">
            Collection On:&nbsp;
            </label>
            <input
            type="date"
            autoComplete="off"
            name="Collection On"
            id="name"
            placeholder="currentDate.toISOString().split('T')[0]"
            defaultValue={
                testData.CollectionOn
                ? new Date(testData.CollectionOn)
                    .toISOString()
                    .split("T")[0]
                : getCurrentDateIST()
            }
            onChange={handleChange}
            onBlur={handleBlur}
            />
        </div>
        </div>
        <div
        style={{
            display: "flex",
            justifyContent: "space-between",
        }}
        >
        <div>
            <label htmlFor="email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sex:&nbsp;
            </label>
            <select
            id="options"
            name="Sex"
            defaultValue={testData.Sex}
            style={{
                fontSize: "15px",
                padding: "2px",
                borderRadius: "1px",
                border: "1px solid #ddd",
            }}
            >
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Neutral">Neutral</option>
            </select>
        </div>
        <div>
            <label htmlFor="name" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ref
            By Dr:&nbsp;
            </label>
            <input
            type="name"
            autoComplete="off"
            name="Ref By Dr"
            id="name"
            placeholder="Doctor's Name"
            defaultValue={testData.RefByDr}
            onChange={handleChange}
            onBlur={handleBlur}
            style={{textTransform: "uppercase"}}
            />
        </div>
        <div>
            <label htmlFor="name" className="input-label">
            Reporting On:&nbsp;
            </label>
            <input
            type="date"
            autoComplete="off"
            name="Reporting On"
            id="name"
            placeholder="currentDate.toISOString().split('T')[0]"
            defaultValue={
                testData.ReportingOn
                ? new Date(testData.ReportingOn)
                    .toISOString()
                    .split("T")[0]
                : getCurrentDateIST()
            }
            onChange={handleChange}
            onBlur={handleBlur}
            />
        </div>
        </div>
        <div
        style={{
            display: "flex",
            justifyContent: "space-between",
        }}
        >
        <div>
            <label htmlFor="email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Center ID:&nbsp;
            </label>
            <input
            type="name"
            autoComplete="off"
            name="Center ID"
            id="email"
            placeholder="Email"
            defaultValue={testData.CenterID}
            onChange={handleChange}
            onBlur={handleBlur}
            />
        </div>
        <div>
            <label htmlFor="email" className="input-label">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Center
            Name:&nbsp;
            </label>
            <input
            type="name"
            autoComplete="off"
            name="Center Name"
            id="email"
            placeholder="Email"
            defaultValue={testData.CenterName}
            onChange={handleChange}
            onBlur={handleBlur}
            style={{textTransform: "uppercase"}}
            />
        </div>
        </div>
    </div>
    </div>
    <div
    className="testName"
    style={{ overflowY: "auto" }} >
    <div style={{ display: "flex" }}>
        <div
        style={{
            width: "10%",
            display: "flex",
            flexDirection: "column",
            border: "1px solid #ddd",
        }}
        >
        <label htmlFor="email" className="input-label">
            Sr no.&nbsp;
        </label>
        {headers}
        </div>
        <div
        style={{
            width: "50%",
            display: "flex",
            flexDirection: "column",
            border: "1px solid #ddd",
            color: "black",
        }}
        >
        <label htmlFor="email" className="input-label">
            TEST NAME&nbsp;
        </label>
        {test}
        </div>
        <div
        style={{
            width: "40%",
            display: "flex",
            flexDirection: "column",
            border: "1px solid #ddd",
        }}
        >
        <label htmlFor="email" className="input-label">
            Buttons&nbsp;
        </label>
        {buttons}
        </div>
    </div>
    </div>
    <br></br>
    <div className="modal-buttons">
    <div></div>
    <div style={{ padding: "2px", }}>
        
        <button
        className="input-button"
        type="submit"
        style={{ marginRight: "2px" }}
        onClick={() => {
            setSaveAndPrint(false);
            setSaveAndPrint2(false);
        }}
        >
        SAVE
        </button>
        <button
        className="input-button"
        type="submit"
        style={{ marginRight: "2px" }}
        onClick={() => {
            setSaveAndPrint(true);
            setSaveAndPrint2(false);
        }}
        >
        SAVE & PRINT INVOICE
        </button>
        <button
        className="input-button"
        type="submit"
        onClick={() => {
            setSaveAndPrint2(true);
            setSaveAndPrint(false);
        }}
        >
        SAVE & PRINT RECEIPT
        </button>
    </div>
    </div>
</form>


//Test Master//



<div className="modal-container">
    <div className="modal-left">
        <h1 className="modal-title">Test Master</h1>
        <br/>
        <form onSubmit={handleSubmit} id="formId">
            <div className="input-block">
                <div
                    style={{
                        display: "flex",
                        flexDirection: "column",
                        justifyContent: "space-between",
                    }}
                >
                    <div
                        style={{
                        display: "flex",
                        justifyContent: "space-between",
                        padding: "5vh",
                    }}
                    >
                        <div>
                            <label htmlFor="email" className="input-label" style={{marginRight: "3vh"}}>
                                Test Name:&nbsp;
                            </label>
                            <input
                                type="name"
                                autoComplete="off"
                                name="Test Name"
                                id="email"
                                placeholder="Test Name"
                                defaultValue={testName}
                                onChange={(e) => setTestName(e.target.value)}
                                style={{textTransform: "uppercase"}}
                            />
                        </div>
                        <div>
                            <label htmlFor="email" className="input-label">
                                Test Rate:&nbsp;
                            </label>
                            <input
                                type="name"
                                autoComplete="off"
                                name="Rate"
                                id="email"
                                placeholder="Rate"
                                defaultValue={rate}
                                onChange={(e) => setRate(e.target.value)}
                                style={{textTransform: "uppercase"}}
                            />
                        </div>
                    </div>
                    <div
                        style={{
                        display: "flex",
                        justifyContent: "space-between",
                        padding: "5vh",
                    }}
                    >
                        <div>
                            <label htmlFor="email" className="input-label">
                                Normal Value:&nbsp;
                            </label>
                            <input
                                type="name"
                                autoComplete="off"
                                name="Normal Value"
                                id="email"
                                placeholder="Normal Value"
                                defaultValue={normalValue}
                                onChange={(e) => setNormalValue(e.target.value)}
                                style={{textTransform: "uppercase"}}
                            />
                        </div>
                        <div>
                            <label htmlFor="email" className="input-label">
                                Unit:&nbsp;
                            </label>
                            <input
                                type="name"
                                autoComplete="off"
                                name="Unit"
                                id="email"
                                placeholder="Unit"
                                defaultValue={unit}
                                onChange={(e) => setUnit(e.target.value)}
                                style={{textTransform: "uppercase"}}
                            />
                        </div>
                    </div>
                    <div
                        style={{
                        display: "flex",
                        justifyContent: "space-between",
                        padding: "5vh",
                    }}
                    >
                        <div>
                            <label htmlFor="email" className="input-label" style={{marginRight: "3vh"}}>
                                Min Value:&nbsp;
                            </label>
                            <input
                                type="name"
                                autoComplete="off"
                                name="Min Value"
                                id="email"
                                placeholder="Min Value"
                                defaultValue={minValue}
                                onChange={(e) => setMinValue(e.target.value)}
                                style={{textTransform: "uppercase"}}
                            />
                        </div>
                        <div>
                            <label htmlFor="email" className="input-label">
                                Max Value:&nbsp;
                            </label>
                            <input
                                type="name"
                                autoComplete="off"
                                name="Max Value"
                                id="email"
                                placeholder="Max Value"
                                defaultValue={maxValue}
                                onChange={(e) => setMaxValue(e.target.value)}
                                style={{textTransform: "uppercase"}}
                            />
                        </div>
                    </div>
                    <div>
                        <label htmlFor="email" className="input-label">
                        GROUP - NAME:&nbsp;
                        </label>
                        <input
                            type="name"
                            autoComplete="off"
                            name="Group Name"
                            id="email"
                            placeholder="GROUP - NAME"
                            defaultValue={grounpName}
                            onChange={(e) => setGroupName(e.target.value)}
                            style={{textTransform: "uppercase"}}
                        />
                    </div>
                </div>
            </div>
            <div className="modal-buttons">
                <button
                    className="input-button"
                    type="button"
                    onClick={handleNew}
                    style={{ marginRight: "2px" }}
                >
                    NEW TEST
                </button>
                <div style={{ padding: "2px" }}>
                
                <button
                    className="input-button"
                    type="submit"
                    style={{ marginRight: "2px" }}
                >
                    SAVE
                </button>
                </div>
            </div>
        </form>
    </div>
    <div
        className="modal-right"
        style={{
        color: "black",
        width: "35%",
        overflowY: "auto",
        height: "80vh",
        }}
    >
        <TestList key={refreshKey} onTestNameSelect={handleTestChange}/>
    </div>
</div>


// Account Master//


import React, { useEffect, useState } from "react";
import Navbar from "../../Components/Navbar";
import styled from "styled-components";
import { useAuth } from "../../Context/AuthContext";
import { doc, getDoc } from "firebase/firestore";
import { db } from "../../config/firebase";

const AccountMaster = () => {
    const [data, setData] = useState([]);
    const [dayAmount, setDayAmount] = useState([]);
    const [monthAmount, setMonthAmount] = useState([]);
    const [yearAmount, setYearAmount] = useState([]);
    const [error, setError] = useState();
    const {currentUser} = useAuth();

    const fetchAccountMaster = async () => {
        try {
            if (currentUser?.uid) {
              const userDocRef = doc(db, currentUser.uid, "Account Master");
              const docSnap = await getDoc(userDocRef);
              if (docSnap.exists()) {
                const useData = docSnap.data();
                extractData(useData);
                setData(useData);
              } else {
                setError("No data found.");
              }
            }
          } catch (error) {
            console.error("Error fetching data from Firestore: ", error);
            setError("Error fetching data.");
          }
    }

    const extractData = (useData) => {
        const date = getCurrentDateIST();
        const [year, month, day] = date.split("-");

        let yearVal = {
          GrandAmount: 0,
          AdvanceAmount: 0,
          Discount: 0,
          BalanceAmount: 0
        };
        for(let months in useData[year]){

          let monthVal = {
            GrandAmount: 0,
            AdvanceAmount: 0,
            Discount: 0,
            BalanceAmount: 0
          };

          for(const day in useData[year][months]){
            monthVal.GrandAmount += parseFloat(useData[year][months][day].GrandAmount);
            monthVal.AdvanceAmount += parseFloat(useData[year][months][day].AdvanceAmount);
            monthVal.Discount += parseFloat(useData[year][months][day].Discount);
            monthVal.BalanceAmount += parseFloat(useData[year][months][day].BalanceAmount);
          }
          if(month == months.split(" ")[1]){
            setDayAmount(useData[year][months][date]);
            setMonthAmount(monthVal);
          }
          yearVal.GrandAmount += parseFloat(monthVal.GrandAmount);
          yearVal.AdvanceAmount += parseFloat(monthVal.AdvanceAmount);
          yearVal.Discount += parseFloat(monthVal.Discount);
          yearVal.BalanceAmount += parseFloat(monthVal.BalanceAmount);
        }
        setYearAmount(yearVal);
    }

    const getCurrentDateIST = () => {
      const now = new Date();
      const options = { timeZone: "Asia/Kolkata" };
      const date = now.toLocaleDateString("en-CA", options); // 'en-CA' locale formats date as YYYY-MM-DD
      return date;
    };

    useEffect(() => {
      fetchAccountMaster();
    }, [])

    return (
        <div style={{ backgroundColor: "#efedee", width: "100%", height: "100vh" }}>
            <Navbar destination={"/doctor_use/TestAdmission"} />
            <Wrapper>
                <div className="container">
                <div className="modal">
                    <div className="modal-container">
                        <div className="modal-left">
                            <h1 className="modal-title">Account Master</h1>
                            <br/>
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "row",
                                    justifyContent: "space-evenly",
                                    color: "black",
                                }}
                            >
                                <div className="cards">
                                    <br/>
                                    <h2 className="modal-title">Daily Cash Report</h2>
                                    <div style={{ }}>
                                    <div className="input-block">
                                      <label htmlFor="name" className="input-label">
                                        Grand Amount:&nbsp;
                                      </label>
                                      <input
                                        style={{marginLeft: "2vh"}}
                                        type="text"
                                        pattern="text"
                                        autoComplete="off"
                                        name="name"
                                        id="name"
                                        defaultValue={dayAmount?.GrandAmount}
                                        readOnly
                                      />
                                    </div>
                                    <div className="input-block">
                                      <label htmlFor="confirm_password" className="input-label">
                                        Advance Amount:&nbsp;
                                      </label>
                                      <input
                                        type="text"
                                        pattern="text"
                                        autoComplete="off"
                                        name="name"
                                        id="name"
                                        defaultValue={dayAmount?.AdvanceAmount}
                                        readOnly
                                      />
                                    </div>
                                    <div className="input-block">
                                      <label htmlFor="name" className="input-label">
                                        Discount:&nbsp;
                                      </label>
                                      <input
                                      style={{marginLeft: "7vh"}}
                                        type="text"
                                        pattern="text"
                                        autoComplete="off"
                                        name="name"
                                        id="name"
                                        defaultValue={dayAmount?.Discount}
                                        readOnly
                                      />
                                    </div>
                                    <div className="input-block">
                                      <label htmlFor="confirm_password" className="input-label">
                                        Balance Amount:&nbsp;
                                      </label>
                                      <input
                                        style={{marginLeft: ".5vh"}}
                                        type="text"
                                        pattern="text"
                                        autoComplete="off"
                                        name="name"
                                        id="name"
                                        defaultValue={dayAmount?.BalanceAmount}
                                        readOnly
                                      />
                                    </div>
                                  </div>
                                </div>
                                <div className="cards">
                                    <br/>
                                    <h2 className="modal-title" >Monthly Cash Report</h2>
                                    <div style={{ }}>
                                    <div className="input-block">
                                      <label htmlFor="name" className="input-label">
                                        Grand Amount:&nbsp;
                                      </label>
                                      <input
                                        style={{marginLeft: "2vh"}}
                                        type="text"
                                        pattern="text"
                                        autoComplete="off"
                                        name="name"
                                        id="name"
                                        defaultValue={monthAmount?.GrandAmount}
                                        readOnly
                                      />
                                    </div>
                                    <div className="input-block">
                                      <label htmlFor="confirm_password" className="input-label">
                                        Advance Amount:&nbsp;
                                      </label>
                                      <input
                                        type="text"
                                        pattern="text"
                                        autoComplete="off"
                                        name="name"
                                        id="name"
                                        defaultValue={monthAmount?.AdvanceAmount}
                                        readOnly
                                      />
                                    </div>
                                    <div className="input-block">
                                      <label htmlFor="name" className="input-label">
                                        Discount:&nbsp;
                                      </label>
                                      <input
                                        style={{marginLeft: "7vh"}}
                                        type="text"
                                        pattern="text"
                                        autoComplete="off"
                                        name="name"
                                        id="name"
                                        defaultValue={monthAmount?.Discount}
                                        readOnly
                                      />
                                    </div>
                                    <div className="input-block">
                                      <label htmlFor="confirm_password" className="input-label">
                                        Balance Amount:&nbsp;
                                      </label>
                                      <input
                                        style={{marginLeft: ".5vh"}}
                                        type="text"
                                        pattern="text"
                                        autoComplete="off"
                                        name="name"
                                        id="name"
                                        defaultValue={monthAmount?.BalanceAmount}
                                        readOnly
                                      />
                                    </div>
                                  </div>
                                </div>
                            </div>
                            <br/>
                            <div className="cards" style={{marginLeft: "35%", color: "black"}}>
                                <br/>
                                <h2 className="modal-title">Yearly Cash Report</h2>
                                <div style={{ }}>
                                  <div className="input-block">
                                    <label htmlFor="name" className="input-label">
                                      Grand Amount:&nbsp;
                                    </label>
                                    <input
                                      style={{marginLeft: "2vh"}}
                                      type="text"
                                      pattern="text"
                                      autoComplete="off"
                                      name="name"
                                      id="name"
                                      defaultValue={yearAmount?.GrandAmount}
                                      readOnly
                                    />
                                  </div>
                                  <div className="input-block">
                                    <label htmlFor="confirm_password" className="input-label">
                                      Advance Amount:&nbsp;
                                    </label>
                                    <input
                                      type="text"
                                      pattern="text"
                                      autoComplete="off"
                                      name="name"
                                      id="name"
                                      defaultValue={yearAmount?.AdvanceAmount}
                                      readOnly
                                    />
                                  </div>
                                  <div className="input-block">
                                    <label htmlFor="name" className="input-label">
                                      Discount:&nbsp;
                                    </label>
                                    <input
                                      style={{marginLeft: "7vh"}}
                                      type="text"
                                      pattern="text"
                                      autoComplete="off"
                                      name="name"
                                      id="name"
                                      defaultValue={yearAmount?.Discount}
                                      readOnly
                                    />
                                  </div>
                                  <div className="input-block">
                                    <label htmlFor="confirm_password" className="input-label">
                                      Balance Amount:&nbsp;
                                    </label>
                                    <input
                                      style={{marginLeft: ".5vh"}}
                                      type="text"
                                      pattern="text"
                                      autoComplete="off"
                                      name="name"
                                      id="name"
                                      defaultValue={yearAmount?.BalanceAmount}
                                      readOnly
                                    />
                                  </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                </div>
            </Wrapper>
        </div>
    );
}

const Wrapper = styled.section`
  .container {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #edf7f9;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .modal {
    width: 100%;
    background: rgba(51, 51, 51, 0.5);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transition: 0.4s;
  }
  .modal-container {
    display: flex;
    max-width: 95vw;
    width: 100%;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;

    transition-duration: 0.3s;
    background: #fff;
  }
  .modal-title {
    margin: 0;
    font-weight: 400;
    color: #023656;
  }
  .form-error {
    font-size: 1.4rem;
    color: #b22b27;
  }
  .modal-desc {
    margin: 6px 0 30px 0;
  }
  .modal-left {
    padding: 5px 30px 20px;
    background: #e2eff5;
    flex: 1.5;
    transition-duration: 0.5s;
    opacity: 1;
  }

  .cards {
    width: 50vh;
    height: 40vh;
    border-radius: 10px;
    background: #e2eff5;
  }

  .modal.is-open .modal-left {
    transform: translateY(0);
    opacity: 1;
    transition-delay: 0.1s;
  }
  .modal-buttons {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .modal-buttons a {
    color: rgba(51, 51, 51, 0.6);
    font-size: 14px;
  }

  .input-button {
    // padding: 1.2rem 3.2rem;
    outline: none;
    text-transform: uppercase;
    border: 0;
    color: #fff;
    border-radius: 4px;
    background: #8c7569;
    transition: 0.3s;
    cursor: pointer;
    font-family: "Nunito", sans-serif;
  }
  .input-button:hover {
    background: #55311c;
  }

  .input-label {
    font-size: 13px;
    // text-transform: uppercase;
    margin-left: 5vh;
    font-weight: 600;
    letter-spacing: 0.7px;
    color: black;
    transition: 0.3s;
  }

  .input-block {
    display: flex;
    flex-direction: row;
    padding: 2vh 2vh .5vh;
    margin-bottom: 10px;
    transition: 0.3s;
    }
    
  .input-block input {
    color: black;
    outline: 0;
    border: 0;
    padding: 4px 4px 1px;
    border-radius: 3px;
    align: center;
    background: #ffffff;
    font-size: 15px;
  }

  .input-block input::-moz-placeholder {
    color: #ccc;
    opacity: 1;
  }
  .input-block input:-ms-input-placeholder {
    color: #ccc;
    opacity: 1;
  }
  .input-block input::placeholder {
    color: #ccc;
    opacity: 1;
  }
  .input-block:focus-within {
    border-color: #8c7569;
  }
  .input-block:focus-within .input-label {
    color: rgba(140, 117, 105, 0.8);
  }

  @media (max-width: 750px) {
    .modal-container {
      max-width: 90vw;
    }
    .flexChange {
      flex-direction: column;
    }
  }

  @media (max-height: 750px){
    .input-label {
      font-size: 11px;
    }
  }
`;

export default AccountMaster;


///  Navbar ///


import React from "react";
import BackButton from "./BackButton";
import { Link, useNavigate } from "react-router-dom";
import { doSignOut } from "../config/auth";
import styled from "styled-components";

const Navbar = ({ destination }) => {
  const navigate = useNavigate();

  return (
    <Wrapper>
      <div 
        style={{
          padding: "1vh 10vh",
          position: "fixed",
          top: 0,
          left: 0,
          width: "100%",
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          zIndex: "100",
        }}
        >
        <div 
          style={{
            padding: "1vh",
            width: "100%",
            borderRadius: "15px",
            backgroundColor: "#e2eff5",
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between",
          }}
        >
          <BackButton destination={destination} />
          <ul style={{ flex: "1", listStyle: "none", textAlign: "center" }}>
            <Link to="/doctor_use/FindAdmission">
              <li className="nav-item">Test Admission</li>
            </Link>
            <Link to="/doctor_use/FindReport">
              <li className="nav-item">Test Report</li>
            </Link>
            <Link to="/doctor_use/TestMaster">
              <li className="nav-item">Test Master</li>
            </Link>
            <Link to="/doctor_use/AccountMaster">
              <li className="nav-item">Account Master</li>
            </Link>
            <Link to="/doctor_use/Configure">
              <li className="nav-item">Settings</li>
            </Link>
            <Link to="/About">
              <li className="nav-item">About</li>
            </Link>
          </ul>
          <button
            onClick={() => {
              doSignOut().then(() => {
                navigate("/login");
              });
            }}
            className="log-out-bar"
          >
            Logout
          </button>
        </div>
      </div>
    </Wrapper>
  );
};

const Wrapper = styled.section`

.nav-item {
  display: inline-block;
  margin: 1vh 2vh;
  font-weight: 800;
  font-size: 1vw;
  color: #132333;
  cursor: pointer;
  transition: all 0.3s ease;
}

.nav-item:hover {
  color: #ffffff;
  background-color: #2d3748;
  border-radius: 5px;
  padding: 0.4vh 1vh;
}

.log-out-bar {
  font-size: small;
  color:  #fff;
  background-color: #2971ab;
}

.log-out-bar:hover {
  color: #2971ab;
  background-color:  #fff;
  padding: 1vh 4vh;
  transition: all 0.3s ease;
}

`

export default Navbar;


////// Start //////


import React from "react";
import { FaUserDoctor } from "react-icons/fa6";
import { TbBrandShopee } from "react-icons/tb";
import { Link } from "react-router-dom";

const Start = () => {
  return (
    <div style={{ padding: "40px" }}>
      <h1>Choose your own option.....</h1>
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          gap: "20vh",
          marginTop: "20%",
        }}
      >
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <Link to="/doctor_use/FindAdmission">
            <FaUserDoctor style={{ fontSize: "15vh", color: "skyblue" }} />
          </Link>
          <h6 style={{ fontSize: "2vh" }}>Doctor's Use</h6>
        </div>
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <Link to="/retail_use/RetailorsSheet">
            <TbBrandShopee style={{ fontSize: "15vh", color: "skyblue" }} />
          </Link>
          <h6 style={{ fontSize: "2vh" }}>Retailer's Use</h6>
        </div>
      </div>
    </div>
  );
};

export default Start;


///// Find Admission ////


import React, { useEffect, useState, useRef } from "react";
import Navbar from "../../Components/Navbar";
import styled from "styled-components";
import { useSnackbar } from "notistack";
import { doc, getDoc } from "firebase/firestore";
import { db } from "../../config/firebase";
import { useAuth } from "../../Context/AuthContext";
import { useReactToPrint } from "react-to-print";
import { useLocation, useNavigate } from "react-router-dom";
import Receipt from "../../Components/Print/Receipt";

const FindAdmission = () => {
  const [data, setData] = useState([]);
  const [userData, setUserData] = useState([]);
  const [pidValue, setPidValue] = useState(null);
  const [headers, setHeaders] = useState([]);
  const [patientName, setPatientName] = useState([]);
  const [age, setAge] = useState([]);
  const [collDate, setCollDate] = useState([]);
  const [t_amount, setT_amount] = useState([]);
  const [paid, setPaid] = useState([]);
  const [dues, setDues] = useState([]);
  const [rebate, setRebate] = useState([]);
  const [doctorName, setDoctorName] = useState([]);
  const [centerName, setCenterName] = useState([]);
  const [patientID, setPatientID] = useState([]);
  const [name, setName] = useState();
  const [date, setDate] = useState();
  const [useButton, setUseButton] = useState([]);
  const [error, setError] = useState();
  const { currentUser } = useAuth();
  const invoiceRef = useRef(null);
  const navigate = useNavigate();
  const location = useLocation();
  const { enqueueSnackbar } = useSnackbar("");
  const [chooseYear, setChooseYear] = useState(
    `Year: ${new Date().getFullYear()}`
  );

  const freeSpace = () => {
    setHeaders([]);
    setPatientName([]);
    setAge([]);
    setCollDate([]);
    setT_amount([]);
    setPaid([]);
    setDues([]);
    setRebate([]);
    setDoctorName([]);
    setCenterName([]);
    setPatientID([]);
    setUseButton([]);
    setName();
    setDate();
  };

  const handlePrintInvoice = useReactToPrint({
    content: () => invoiceRef.current,
  });

  const handleFind = async (e, check) => {
    setUserData([]);
    try {
      const userDocRef = doc(db, currentUser.uid, `${e}`);
      const userDocSnapshot = await getDoc(userDocRef);

      if (userDocSnapshot.exists()) {
        const userFetchData = userDocSnapshot.data();
        setUserData(userFetchData);
        if (userData && check) {
          setTimeout(handlePrintInvoice, 100);
        }
        return userFetchData;
      } else {
        setError(true);
      }
    } catch (error) {
      setError(true);
      console.error("Error fetching data from Firestore: ", error);
    }
  };

  const searchBy = async () => {
    try {
      if (name && currentUser?.uid && date) {
        const userDocRef = doc(db, currentUser.uid, "Name list");
        const docSnap = await getDoc(userDocRef);

        if (docSnap.exists()) {
          const new_name = name.toUpperCase();
          const useData = docSnap.data()[new_name][date];
          if(useData != undefined){
            setData(useData);
            handleAddMultipleTests(useData, null, null);
          }else{
            enqueueSnackbar("Name not fount", { variant: "info" });
          }
        } else {
          enqueueSnackbar("Name not fount", { variant: "info" });
        }
      } else if(date && !name && currentUser?.uid) {
        await fetchUserData(date);
      } else if(name && !date && currentUser?.uid){
        const userDocRef = doc(db, currentUser.uid, "Name list");
        const docSnap = await getDoc(userDocRef);

        if (docSnap.exists()) {
          const new_name = name.toUpperCase();
          const dates = docSnap.data()[new_name];
          const result = {};
          for (const date in dates) {
            const vnos = dates[date];
      
            for (const vno in vnos) {
              result[vno] = vnos[vno];
            }
          }
          if(result != undefined){
            setData(result);
            handleAddMultipleTests(result, null, null);
          }else{
            enqueueSnackbar("Name with required date not fount", { variant: "info" });
          }
        } else {
          enqueueSnackbar("Name with required date not fount", { variant: "info" });
        }
      }
    } catch (error) {
      console.error("Error fetching data from Firestore: ", error);
      setError("Error fetching data.");
    }
  };

  const handleAddMultipleTests = (val, month1, day1) => {
    freeSpace();
    let month = "", day = "";
    if(!name){
      month = `Month: ${month1}`;
      day = `Date: ${day1}`;
      val = val[month][day];
    }
    const count = Object.keys(val).length;
    const keys = Object.keys(val);
    
    const newHeaders = [];
    const newPatientName = [];
    const newAge = [];
    const newDate = [];
    const newT_amount = [];
    const newPaid = [];
    const newDues = [];
    const newRebate = [];
    const newDoctorName = [];
    const newCenterName = [];
    const newPatientID = [];
    const newButtons = [];
    
    for (let i = 0; i < count; i++) {
      const key = keys[i];
      const data2 = val[key];
      newHeaders.push(
        <h1
          key={headers.length + i}
          style={{
            color: "black",
            fontSize: "12px",
            borderTop: "1px solid #ddd",
            height: "30px",
          }}
        >
          {headers.length + i + 1}
        </h1>
      );

      newPatientName.push(
        <p
          style={{
            fontSize: "17px",
            padding: "2px",
            borderRadius: "1px",
            height: "30px",
            borderTop: "1px solid #ddd",
            color: "black",
            maxWidth: "24vw",
            whiteSpace: "nowrap",
            overflowX: "auto",
            overflowY: "hidden",
          }}
        >
          {data2?.PatientName}
        </p>
      );

      newPatientID.push(
        <p
          style={{
            fontSize: "17px",
            padding: "2px",
            borderRadius: "1px",
            height: "30px",
            borderTop: "1px solid #ddd",
            color: "black",
            overflow: "scroll",
          }}
        >
          {data2?.PatientID}
        </p>
      );

      newAge.push(
        <p
          style={{
            fontSize: "17px",
            padding: "1px",
            height: "30px",
            borderRadius: "1px",
            borderTop: "1px solid #ddd",
            color: "black",
            overflow: "scroll",
          }}
        >
          {data2?.Age}
        </p>
      );
      newDate.push(
        <p
          style={{
            fontSize: "17px",
            padding: "1px",
            height: "30px",
            borderRadius: "1px",
            borderTop: "1px solid #ddd",
            color: "black",
            overflow: "scroll",
          }}
        >
          {data2?.RegistrationOn? `${data2?.RegistrationOn.split("-")[2]} / ${data2?.RegistrationOn.split("-")[1]} / ${" "} 
          ${data2?.RegistrationOn.split("-")[0][2]}${data2?.RegistrationOn.split("-")[0][3]}`: ""}
        </p>
      );
      newT_amount.push(
        <p
          style={{
            fontSize: "17px",
            padding: "1px",
            height: "30px",
            borderRadius: "1px",
            borderTop: "1px solid #ddd",
            color: "black",
            overflow: "scroll",
          }}
        >
          {data2?.GrandAmount}
        </p>
      );
      newPaid.push(
        <p
          style={{
            fontSize: "17px",
            padding: "1px",
            height: "30px",
            borderRadius: "1px",
            borderTop: "1px solid #ddd",
            color: "black",
            overflow: "scroll",
          }}
        >
          {data2?.AdvanceAmount}
        </p>
      );
      newDues.push(
        <p
          style={{
            fontSize: "17px",
            padding: "1px",
            height: "30px",
            borderRadius: "1px",
            borderTop: "1px solid #ddd",
            color: "black",
            overflow: "scroll",
          }}
        >
          {data2?.BalanceAmount}
        </p>
      );
      newRebate.push(
        <p
          style={{
            fontSize: "17px",
            padding: "1px",
            height: "30px",
            borderRadius: "1px",
            borderTop: "1px solid #ddd",
            color: "black",
            overflow: "scroll",
          }}
        >
          {data2?.Discount}
        </p>
      );
      newDoctorName.push(
        <p
          style={{
            fontSize: "17px",
            padding: "1px",
            height: "30px",
            borderRadius: "1px",
            borderTop: "1px solid #ddd",
            color: "black",
            overflow: "scroll",
          }}
        >
          {data2?.RefByDr}
        </p>
      );
      newCenterName.push(
        <p
          style={{
            fontSize: "17px",
            padding: "1px",
            height: "30px",
            borderRadius: "1px",
            borderTop: "1px solid #ddd",
            color: "black",
            overflow: "scroll",
          }}
        >
          {data2?.CenterName}
        </p>
      );
      newButtons.push(
        <div
          style={{
            display: "flex",
            flexDirection: "row",
            padding: "2px",
            justifyContent: "space-between",
            borderTop: "1px solid #ddd",
            height: "30px",
          }}
        >
          <button
            className="input-button"
            style={{
              fontSize: "15px",
              padding: "2px",
              height: "25px",
              width: "45%",
              // borderRadius: "2px",
            }}
            onClick={() => {
              handleFind(data2?.PatientID, true);
            }}
            name={`button1${headers.length + i}`}
            id="name"
          >
            Print
          </button>
          <button
            className="input-button"
            style={{
              fontSize: "15px",
              padding: "2px",
              height: "25px",
              width: "45%",
              // borderRadius: "2px",
            }}
            onClick={() => {
              navigate("/doctor_use/TestAdmission", {
                state: {
                  PidValue: data2?.PatientID,
                  date: `${chooseYear.split(" ")[1]}-${month1}-${day1}`,
                },
              });
            }}
            name={`button2${headers.length + i}`}
            id="name"
          >
            Update
          </button>
        </div>
      );
    }

    setHeaders((prevHeaders) => [...prevHeaders, ...newHeaders]);
    setPatientName((prevPatientName) => [
      ...prevPatientName,
      ...newPatientName,
    ]);
    setPatientID((prevPatientID) => [...prevPatientID, ...newPatientID]);
    setAge((prevAge) => [...prevAge, ...newAge]);
    setCollDate((prevDate) => [...prevDate, ...newDate]);
    setT_amount((prevT_amount) => [...prevT_amount, ...newT_amount]);
    setPaid((prePaid) => [...prePaid, ...newPaid]);
    setDues((prevDues) => [...prevDues, ...newDues]);
    setRebate((prevRebate) => [...prevRebate, ...newRebate]);
    setDoctorName((prevDoctorName) => [...prevDoctorName, ...newDoctorName]);
    setCenterName((prevCenterName) => [...prevCenterName, ...newCenterName]);
    setUseButton((prevButton) => [...prevButton, ...newButtons]);
  };

  const fetchUserData = async (initialDate) => {
    try {
      if (chooseYear && currentUser?.uid) {
        const userDocRef = doc(db, currentUser.uid, chooseYear);
        const docSnap = await getDoc(userDocRef);

        if (docSnap.exists()) {
          const useData = docSnap.data();
          setData(useData);
          const [year, month, day] = initialDate.split("-");
          handleAddMultipleTests(useData, month, day);
        } else {
          setError("No data found for the selected year.");
        }
      }
    } catch (error) {
      console.error("Error fetching data from Firestore: ", error);
      setError("Error fetching data.");
    }
  };

  const getCurrentDateIST = () => {
    const now = new Date();
    const options = { timeZone: "Asia/Kolkata" };
    const date = now.toLocaleDateString("en-CA", options); // 'en-CA' locale formats date as YYYY-MM-DD
    return date;
  };

  useEffect(() => {
    const initialDate = location.state?.date || getCurrentDateIST();
    fetchUserData(initialDate);
  }, [chooseYear, location.state]);

  return (
    <div style={{ backgroundColor: "#efedee", width: "100%", height: "100vh" }}>
      {userData && <Receipt ref={invoiceRef} printData={userData} />}
      <Navbar destination={"/"} />
      <Wrapper>
        <div className="container">
          <div className="modal">
            <div className="modal-container">
              <div className="modal-left">
                <button
                  className="input-button"
                  style={{
                    display: "flex",
                    justifyContent: "space-evenly",
                  }}
                  onClick={() => {
                    navigate("/doctor_use/TestAdmission");
                  }}
                >
                  <h4>New Registration</h4>
                </button>
                <h1 className="modal-title">Admission</h1>
                <br/>
                <div
                  className="input-block"
                  style={{
                    color: "#052d28",
                    display: "flex",
                    flexDirection: "row",
                    justifyContent: "space-between",
                  }}
                >
                  <div style={{ display: "flex", flexDirection: "row", color: "#052d28" }}>
                    <h4 className="search-list">Patient Name: &nbsp;</h4>
                    <input
                      style={{
                        fontSize: "17px",
                        padding: "2px",
                        border: "2px solid #ddd",
                        backgroundColor: "#ffffff",
                        color: "black",
                      }}
                      type="text"
                      autoComplete="off"
                      name="Date"
                      id="name"
                      onChange={(e) => {
                        setName(e.target.value);
                      }}
                    />
                  </div>
                  <div style={{ display: "flex", flexDirection: "row" }}>
                    <h4 className="search-list">Patient ID: &nbsp;</h4>
                    <input
                      style={{
                        fontSize: "17px",
                        padding: "2px",
                        border: "2px solid #ddd",
                        backgroundColor: "#ffffff",
                        color: "black",
                      }}
                      type="text"
                      autoComplete="off"
                      name="Date"
                      id="name"
                      onChange={(e) => {
                        setPidValue(e.target.value);
                      }}
                    />
                  </div>
                  <div style={{ display: "flex", flexDirection: "row" }}>
                    <h4 className="search-list">Date: &nbsp;</h4>
                    <input
                      style={{
                        backgroundColor: "#ffffff",
                        color: "black",
                        border: "2px solid #ddd",
                      }}
                      type="date"
                      autoComplete="off"
                      name="Date"
                      id="name"
                      onChange={(e) => {
                        setDate(e.target.value);
                      }}
                      defaultValue={location.state?.date || getCurrentDateIST()}
                    />
                  </div>
                  <button
                    className="input-button"
                    onClick={() => {
                      if (pidValue){
                        navigate("/doctor_use/TestAdmission", {
                          state: {
                            PidValue: pidValue,
                          },
                        });
                      }else{
                        setName(name);
                        searchBy();
                      }
                    }}
                  >
                    Search
                  </button>
                </div>
                <div
                  style={{
                    border: "3px solid #ddd",
                    borderRadius: "4px",
                    overflowY: "auto",
                    MaxHeight: "50vh",
                    backgroundColor: "#ffffff",
                  }}
                >
                  <div style={{ display: "flex" }}>
                    <div
                      style={{
                        width: "10%",
                        display: "flex",
                        flexDirection: "column",
                        borderTop: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label" style={{whiteSpace: "nowrap"}}>
                        Sr no.&nbsp;
                      </label>
                      {headers}
                    </div>
                    <div style={{width: "1px", backgroundColor: "#ddd", height: "19.4vh", MaxHeight: "70vh"}}></div>
                    <div
                      style={{
                        width: "35%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label" >
                        PATIENT NAME
                      </label>
                      {patientName}
                    </div>
                    <div
                      style={{
                        width: "15%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label" style={{whiteSpace: "nowrap"}}>
                        PATIENT ID
                      </label>
                      {patientID}
                    </div>
                    <div
                      style={{
                        width: "15%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label">
                        Age&nbsp;
                      </label>
                      {age}
                    </div>
                    <div
                      style={{
                        width: "15%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label">
                        Date&nbsp;
                      </label>
                      {collDate}
                    </div>
                    <div
                      style={{
                        width: "15%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label">
                        T_Amount&nbsp;
                      </label>
                      {t_amount}
                    </div>
                    <div
                      style={{
                        width: "15%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label">
                        Paid&nbsp;
                      </label>
                      {paid}
                    </div>
                    <div
                      style={{
                        width: "15%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label">
                        Dues&nbsp;
                      </label>
                      {dues}
                    </div>
                    <div
                      style={{
                        width: "15%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label">
                        Rebate&nbsp;
                      </label>
                      {rebate}
                    </div>
                    <div
                      style={{
                        width: "15%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label" style={{whiteSpace: "nowrap"}}>
                        Ref by Dr.&nbsp;
                      </label>
                      {doctorName}
                    </div>
                    <div
                      style={{
                        width: "15%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label" style={{whiteSpace: "nowrap"}}>
                        C. NAME&nbsp;
                      </label>
                      {centerName}
                    </div>
                    <div
                      style={{
                        width: "21%",
                        display: "flex",
                        flexDirection: "column",
                        border: "1px solid #ddd",
                      }}
                    >
                      <label htmlFor="email" className="input-label">
                        Buttons&nbsp;
                      </label>
                      {useButton}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </Wrapper>
    </div>
  );
};

const Wrapper = styled.section`
  .container {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #eef3f3;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .modal {
    width: 100%;
    background: rgba(51, 51, 51, 0.5);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transition: 0.4s;
  }
  .modal-container {
    display: flex;
    max-width: 95vw;
    width: 100%;
    border-radius: 10px;
    overflow: hidden;
    position: absolute;

    transition-duration: 0.3s;
    background: #fff;
  }
  .modal-title {
    margin: 0;
    font-weight: 400;
    color: #023656;
  }
  .form-error {
    font-size: 1.4rem;
    color: #b22b27;
  }
  .modal-desc {
    margin: 0.375vw 0 3.62vh 0;
  }
  .modal-left {
    padding: 3.75vw 3.62vh 2.14vh;
    background: #e2eff5;
    flex: 1.5;
    transition-duration: 0.5s;
    opacity: 1;
  }

  .modal.is-open .modal-left {
    transform: translateY(0);
    opacity: 1;
    transition-delay: 0.1s;
  }
  .modal-buttons {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .modal-buttons a {
    color: rgba(51, 51, 51, 0.6);
    font-size: 14px;
  }

  .input-button {
    // padding: 1.2rem 3.2rem;
    outline: none;
    text-transform: uppercase;
    border: 0;
    color: #fff;
    border-radius: 10px;
    background: #2975ad;
    transition: 0.3s;
    cursor: pointer;
    font-family: "Nunito", sans-serif;
  }
  .input-button:hover {
    color: #2975ad;
    background: #fff;
  }

  .input-label {
    font-size: 15px;
    // text-transform: uppercase;
    font-weight: 600;
    letter-spacing: 0.7px;
    color: #12263e;
    transition: 0.3s;
  }

  .input-block {
    display: flex;
    flex-direction: column;
    padding: 0.625hw 1.2vh 0.96vh;
    // border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 10px;
    transition: 0.3s;
  }

  .input-block input {
    outline: 0;
    border: 0;
    padding: 4px 4px 1px;
    border-radius: 10px;
    font-size: 15px;
  }

  .input-block input::-moz-placeholder {
    color: #ccc;
    opacity: 1;
  }
  .input-block input:-ms-input-placeholder {
    color: #ccc;
    opacity: 1;
  }
  .input-block input::placeholder {
    color: #ccc;
    opacity: 1;
  }
  .input-block:focus-within {
    border-color: #8c7569;
  }
  .input-block:focus-within .input-label {
    color: rgba(140, 117, 105, 0.8);
  }

  .search-list {
    color: #2d4b62;
    font-size: 20px;
    font-weight: 300;
    padding: 10px 10px 10px;
  }

  @media (max-width: 750px) {
    .modal-container {
      max-width: 90vw;
    }
    .flexChange {
      flex-direction: column;
    }
  }
`;

export default FindAdmission;
